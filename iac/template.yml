
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure to build a CI/CD process on AWS to automate the creation of PDF from .tex files'

Resources:

  CodeBuildPublicArtifactBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketEncryption: 
          ServerSideEncryptionConfiguration: 
          - BucketKeyEnabled: true
      BucketName: codebuild-latexcv-artifacts
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt LambdaUpdateLatestCV.Arn
            Event: "s3:ObjectCreated:Put"
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .pdf
          - Function: !GetAtt LambdaUpdateLatestCV.Arn
            Event: "s3:ObjectCreated:Post"
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .pdf
      Tags: 
        - Key: application
          Value: latexcv


  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaUpdateLatestCV
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
      SourceArn: !GetAtt CodeBuildPublicArtifactBucket.Arn

  LambdaUpdateLatestCV:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        ZipFile: |
          import json
          import urllib.parse
          import boto3

          print('Loading function')

          s3 = boto3.resource('s3')


          def lambda_handler(event, context):
              #print("Received event: " + json.dumps(event, indent=2))

              # Get the object from the event and show its content type
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
              print("Received event for key " + key + " and bucket " + bucket)
              try:
                  copy_source = { 'Bucket': bucket, 'Key': key }
                  s3.meta.client.copy(copy_source, 'codebuild-latexcv-artifacts', 'latest/'+key.split("/")[-1])
                  return ("Successfully copied on latest directory")
              except Exception as e:
                  print(e)
                  print('Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(key, bucket))
                  raise e

      Description: "Lambda used to update the 'latest' directory on CVs bucket."
      FunctionName: latexcv-update-latest
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 5
      Tags: 
        - Key: application
          Value: latexcv

  LatexCVRepo:
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: "My personal CV"
      RepositoryName: latexcv-2
      Tags: 
        - Key: application
          Value: latexcv

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      BadgeEnabled: true
      ConcurrentBuildLimit: 1
      Name: latexcv-builder
      Source: 
        Type: CODECOMMIT
        Location: !GetAtt LatexCVRepo.CloneUrlHttp
      SourceVersion: refs/heads/main
      Artifacts: 
        EncryptionDisabled: false
        Location: !Ref CodeBuildPublicArtifactBucket
        NamespaceType: BUILD_ID
        OverrideArtifactName: false
        Packaging: NONE
        Type: S3
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: registry.gitlab.com/islandoftex/images/texlive:latest
        Type: LINUX_CONTAINER
      LogsConfig: 
        CloudWatchLogs: 
          GroupName: codebuild
          Status: ENABLED
          StreamName: latexcv-2
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      ResourceAccessRole: !GetAtt CodeBuildServiceRole.Arn
      TimeoutInMinutes: 10
      Visibility: PRIVATE
      Tags: 
        - Key: application
          Value: latexcv

  LambdaExecutionRole:  
    Type: AWS::IAM::Role
    Properties: 
      ManagedPolicyArns: 
       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Description: "Role used by CodeBuild to store on S3 and create Logs"
      Policies: 
      - PolicyName: latexcv-lambda-s3-updater
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource:
            - arn:aws:s3:::codebuild-latexcv-artifacts
            - arn:aws:s3:::codebuild-latexcv-artifacts/*
            Action:
            - s3:GetObject
            - s3:GetBucketAcl
            - s3:GetBucketLocation
            - s3:PutObject
      RoleName: latexcv-lambda-role
      Tags: 
        - Key: application
          Value: latexcv

  CodeBuildServiceRole:  
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Description: "Role used by CodeBuild to store on S3 and create Logs"
      Policies: 
        - PolicyName: codebuild-policy-latexcv
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Resource:
              - arn:aws:logs:eu-central-1:152119833031:log-group:codebuild
              - arn:aws:logs:eu-central-1:152119833031:log-group:codebuild:*
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            - Effect: Allow
              Resource:
              - arn:aws:logs:eu-central-1:152119833031:log-group:/aws/codebuild/latexcv-2
              - arn:aws:logs:eu-central-1:152119833031:log-group:/aws/codebuild/latexcv-2:*
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            - Effect: Allow
              Resource:
              - arn:aws:s3:::codepipeline-eu-central-1-*
              Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            - Effect: Allow
              Resource:
              - !GetAtt LatexCVRepo.Arn
              Action:
              - codecommit:GitPull
            - Effect: Allow
              Resource:
              - !Sub
                - arn:aws:s3:::${bucket}
                - bucket: !Ref CodeBuildPublicArtifactBucket
              - !Sub
                - arn:aws:s3:::${bucket}/*
                - bucket: !Ref CodeBuildPublicArtifactBucket
              Action:
              - s3:PutObject
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            - Effect: Allow
              Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
              Resource:
              - arn:aws:codebuild:eu-central-1:152119833031:report-group/latexcv-builder*
      RoleName: codebuild-servicerole-latexcv
      Tags: 
        - Key: application
          Value: latexcv

  CodeBuildTriggerRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Rule to trigger a build each time there's a push on main branch on latexcv repository"
      EventBusName: default
      EventPattern: 
        detail-type: 
          - "CodeCommit Repository State Change"
        source:
        - aws.codecommit
        resources:
        - !GetAtt LatexCVRepo.Arn
        details:
          repositoryName:
          - !GetAtt LatexCVRepo.Name
          referenceType: 
          - branch
          referenceName:
          - main
      Name: codebuild-latexcv-push-trigger
      Targets: 
        - Id: CodeBuildLatexCV
          Arn: !GetAtt BuildProject.Arn
          RoleArn: !GetAtt EventRuleServiceRole.Arn


  EventRuleServiceRole:  
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sts:AssumeRole
      Description: "Role used by EventBridge to start CodeBuild build"
      Policies: 
      - PolicyName: codebuild-policy-latexcv
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - codebuild:StartBuild
            Resource:
            - !GetAtt BuildProject.Arn